import threading
import random
from time import sleep


class Bank:
     def __init__(self):
         self.bank = 0
         self.lock = threading.Lock()


     def deposit(self):
         for i in range(100):
             if self.bank >= 500 and self.lock.locked():
                 self.lock.release()
             sleep(0.001)
             random_cash = random.randint(50, 500)
             self.bank += random_cash
             print(f'Пополнение: {random_cash}. Баланс:{self.bank}')


     def take(self):
         for i in range(100):
             random_c = random.randint(50, 500)
             print(f'Запрос на {random_c}')
             if random_c <= self.bank:
                self.bank -= random_c
                print(f'Снятие: {random_c}. Баланс: {self.bank}')
             else:
                 print(f'Запрос отклонён, недостаточно средств')
                 self.lock.acquire()




bk = Bank()
th1 = threading.Thread(target=Bank.deposit, args=(bk,))
th2 = threading.Thread(target=Bank.take, args=(bk,))

th1.start()
th2.start()
th1.join()
th2.join()

print(f'Итоговый баланс: {bk.bank}')
